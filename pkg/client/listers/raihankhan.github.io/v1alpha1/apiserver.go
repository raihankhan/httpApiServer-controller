/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/raihankhan/httpApiServer-controller/pkg/apis/raihankhan.github.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiserverLister helps list Apiservers.
// All objects returned here must be treated as read-only.
type ApiserverLister interface {
	// List lists all Apiservers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Apiserver, err error)
	// Apiservers returns an object that can list and get Apiservers.
	Apiservers(namespace string) ApiserverNamespaceLister
	ApiserverListerExpansion
}

// apiserverLister implements the ApiserverLister interface.
type apiserverLister struct {
	indexer cache.Indexer
}

// NewApiserverLister returns a new ApiserverLister.
func NewApiserverLister(indexer cache.Indexer) ApiserverLister {
	return &apiserverLister{indexer: indexer}
}

// List lists all Apiservers in the indexer.
func (s *apiserverLister) List(selector labels.Selector) (ret []*v1alpha1.Apiserver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Apiserver))
	})
	return ret, err
}

// Apiservers returns an object that can list and get Apiservers.
func (s *apiserverLister) Apiservers(namespace string) ApiserverNamespaceLister {
	return apiserverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiserverNamespaceLister helps list and get Apiservers.
// All objects returned here must be treated as read-only.
type ApiserverNamespaceLister interface {
	// List lists all Apiservers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Apiserver, err error)
	// Get retrieves the Apiserver from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Apiserver, error)
	ApiserverNamespaceListerExpansion
}

// apiserverNamespaceLister implements the ApiserverNamespaceLister
// interface.
type apiserverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Apiservers in the indexer for a given namespace.
func (s apiserverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Apiserver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Apiserver))
	})
	return ret, err
}

// Get retrieves the Apiserver from the indexer for a given namespace and name.
func (s apiserverNamespaceLister) Get(name string) (*v1alpha1.Apiserver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apiserver"), name)
	}
	return obj.(*v1alpha1.Apiserver), nil
}
